from time import clock, time
import os, stat, cPickle, sys, tempfile
import itertools
from sets import Set


global EXTENSIONS_TO_SCAN
EXTENSIONS_TO_SCAN = ('zpt','dtml','sql','py','css','js')

global FOLDERS_TO_SKIP
FOLDERS_TO_SKIP = ('CVS','.svn','.autogenerated')
    
thisfilename = __file__.split('/')[-1]

def anyTrue(pred,seq):
    """Returns True if a True predicate is found, False
    otherwise. Quits as soon as the first True is found"""
    return True in itertools.imap(pred,seq)


def is_different_infos(info1, info2):
    # any difference return True
    if not info1.items():
        return not info2.items()
    
    for k, v in info1.items():
        try:
            if v != info2.get(k):
                print k
                #print v, info2.get(k)
                return True
        except:
            print "Missing", k
            return True
    return False


def main():
    try:
        if not os.path.isdir(sys.argv[1]):
            raise
    except:
        print "First argument must be product directory"
        sys.exit(1)
    
    print run(sys.argv[1])
    return 0
    
    
def run(path_to_walk_in, temp_directory=tempfile.gettempdir(),
        prev_info=None, save_all_info=False):
    all_info = {}
    
    def rejectfilename(name):
        if name == 'mtimer.py' or \
           name == thisfilename or \
           anyTrue(name.startswith, ('.','#')) or \
           anyTrue(name.endswith, ('.svn-base','~','.pyc')):
            return 1
        return 0
    
    folders_to_skip_set = Set(FOLDERS_TO_SKIP)
    
    def tester(arg, dirname, names):
        if not Set(dirname.split(os.sep)) & folders_to_skip_set:
        #if os.path.split(dirname)[-1] not in FOLDERS_TO_SKIP:
            for name in names:
                if rejectfilename(name):
                    continue
                
                __, ext = os.path.splitext(name)
            
                if ext and ext[1:] in EXTENSIONS_TO_SCAN:
                    path = os.path.join(dirname, name)
                    st = os.stat(path)
                    all_info[path] = st[stat.ST_MTIME]

    os.path.walk(path_to_walk_in, tester, None)
    
    picklefilename = 'mtime-%s.pickle' % hash(path_to_walk_in)
    _path = temp_directory
    #if os.path.isdir(os.path.expanduser(os.path.join('~','tmp'))):
    #    _path = os.path.expanduser(os.path.join('~','tmp'))
    picklefilepath = os.path.join(_path, picklefilename)
                    
    if prev_info is None:
        try:
            prev_info = cPickle.load(open(picklefilepath))
        except:
            print >>sys.stderr, "no previous mtime info, start afresh"
            prev_info = {}

    if save_all_info:
        cPickle.dump(all_info, open(picklefilepath,'w'))

    if is_different_infos(prev_info, all_info):
        return "Different", all_info
    else:
        return "Not different", all_info
    

if __name__=='__main__':
    sys.exit(main())
